<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Explorations ... Go Packages</title>
    <link>https://mandolyte.github.io/explorations/posts/</link>
    <description>Recent content in Posts on Explorations ... Go Packages</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; 2018 - Cecil New</copyright>
    <lastBuildDate>Wed, 04 Jul 2018 13:19:13 -0400</lastBuildDate>
    
	<atom:link href="https://mandolyte.github.io/explorations/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Experimental Go Generics</title>
      <link>https://mandolyte.github.io/explorations/posts/using-experimental-go-generics/</link>
      <pubDate>Wed, 04 Jul 2018 13:19:13 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/using-experimental-go-generics/</guid>
      <description>Experience with Experimental Go Generics Overview There are at least two experimental implementations of Go that add generics (see note 1). I experimented with albrow/fo. I don&amp;rsquo;t know enough to classify the approached used by fo, but in simple terms, both type declarations and functions/methods are extended to take optional type parameters</description>
    </item>
    
    <item>
      <title>Using querydb in db-utils</title>
      <link>https://mandolyte.github.io/explorations/posts/using-querydb-in-db-utils/</link>
      <pubDate>Fri, 20 Apr 2018 10:44:45 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/using-querydb-in-db-utils/</guid>
      <description>The purpose of &amp;ldquo;querydb&amp;rdquo; is to easily execute an SQL SELECT statement at the command line or in a script. As with &amp;ldquo;modifydb&amp;rdquo;, in order to be generic, you may need to update the source to include the appropriate driver.</description>
    </item>
    
    <item>
      <title>Using modifydb in db-utils</title>
      <link>https://mandolyte.github.io/explorations/posts/using-modifydb-in-db-utils/</link>
      <pubDate>Fri, 20 Apr 2018 10:32:35 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/using-modifydb-in-db-utils/</guid>
      <description>The purpose of &amp;ldquo;modifydb&amp;rdquo; is to easily execute an SQL statement that updates a database. In order to be generic, you may need to update the source to include the appropriate driver.</description>
    </item>
    
    <item>
      <title>Using pgcopy in db-utils</title>
      <link>https://mandolyte.github.io/explorations/posts/using-pgcopy-in-db-utils/</link>
      <pubDate>Fri, 20 Apr 2018 10:17:04 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/using-pgcopy-in-db-utils/</guid>
      <description>The &amp;ldquo;pgcopy&amp;rdquo; utility will import a CSV file using the &amp;ldquo;lib/pq&amp;rdquo; copy-in-schema function. It is one of the fastest ways to import into a Postgres database.
Using the &amp;ldquo;-help&amp;rdquo; options shows:</description>
    </item>
    
    <item>
      <title>Database Utilities</title>
      <link>https://mandolyte.github.io/explorations/posts/db-utils/</link>
      <pubDate>Fri, 20 Apr 2018 10:03:59 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/db-utils/</guid>
      <description>I have completed some utilities for databases. This post is an overview of what it available. Other posts will contain details on each&amp;hellip; or you can just read the READMEs if you can&amp;rsquo;t wait.</description>
    </item>
    
    <item>
      <title>Markdown to PDF</title>
      <link>https://mandolyte.github.io/explorations/posts/markdown-to-pdf/</link>
      <pubDate>Thu, 19 Apr 2018 21:58:01 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/markdown-to-pdf/</guid>
      <description>I recently completed the initial release of a Markdown to PDF package.
Repo is named &amp;ldquo;mdtopdf&amp;rdquo; and is here. Docs are here.
The supported Markdown elements are:
 Emphasized and strong text Headings 1-6 Ordered and unordered lists Nested lists Images Tables Links Code blocks and back-ticked text  In the &amp;ldquo;cmd&amp;rdquo; folder is an example of using the package and it contains both a test markdown file and the resultant PDF file.</description>
    </item>
    
    <item>
      <title>Gofpdf: Create a Pdf Table From a CSV File</title>
      <link>https://mandolyte.github.io/explorations/posts/gofpdf-create-a-pdf-table-from-a-csv-file/</link>
      <pubDate>Thu, 19 Apr 2018 21:43:08 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/gofpdf-create-a-pdf-table-from-a-csv-file/</guid>
      <description>Creating a PDF table from a CSV file poses some challenges in fitting to the page without wrapping text content within the cell. This example here approaches the problem this way:</description>
    </item>
    
    <item>
      <title>Gofpdf: Creating a Numbered List</title>
      <link>https://mandolyte.github.io/explorations/posts/gofpdf-creating-a-numbered-list/</link>
      <pubDate>Thu, 19 Apr 2018 21:35:16 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/gofpdf-creating-a-numbered-list/</guid>
      <description>This example shows how to create a number list of items here. It includes use of several methods:
 It uses GetStringWidth() to get the point width of the letter &amp;ldquo;m&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Gofpdf: Creating a Pdf From a Text File</title>
      <link>https://mandolyte.github.io/explorations/posts/gofpdf-creating-a-pdf-from-a-text-file/</link>
      <pubDate>Thu, 19 Apr 2018 21:24:22 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/gofpdf-creating-a-pdf-from-a-text-file/</guid>
      <description>I plan to create some examples using the gofpdf package, hopefully useful in their own right.
The first example creates a PDF file from a text file or STDIN. Here are a couple of use cases taken from the &amp;ldquo;readme&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Xml Identity Transform</title>
      <link>https://mandolyte.github.io/explorations/posts/xml-identity-transform/</link>
      <pubDate>Sat, 14 Apr 2018 21:52:09 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/xml-identity-transform/</guid>
      <description>An identity transformation is one that reproduces the input. The article here, shows examples using XML Stylesheets and XQuery.
The Go XML package cannot exactly do an identity transform because the standard marshal function does not handle processing instructions or directives.</description>
    </item>
    
    <item>
      <title>Encoding Xml Unmarshal</title>
      <link>https://mandolyte.github.io/explorations/posts/encoding-xml-unmarshal/</link>
      <pubDate>Sat, 14 Apr 2018 21:42:55 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/encoding-xml-unmarshal/</guid>
      <description>Most examples using Unmarshal show structs that are setup ahead of time to capture specific contents of the XML document. While this is the common use case, a struct can be designed to capture the document in a generic fashion, i.</description>
    </item>
    
    <item>
      <title>Encoding Xml Decode</title>
      <link>https://mandolyte.github.io/explorations/posts/encoding-xml-decode/</link>
      <pubDate>Sat, 14 Apr 2018 21:41:38 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/encoding-xml-decode/</guid>
      <description>Background I plan to explore a number of Go packages. These will often come with useful samples or utilities. Enjoy!
All the code for this post is in this repo.</description>
    </item>
    
    <item>
      <title>Using Chromebook for Go Development</title>
      <link>https://mandolyte.github.io/explorations/posts/using-chromebook-for-go-development/</link>
      <pubDate>Sat, 14 Apr 2018 21:40:30 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/using-chromebook-for-go-development/</guid>
      <description>The process for installing a number of Linux variants is fairly well documented and findable with web searches. I have spent some time playing with this and have settled on an approach that works well for me.</description>
    </item>
    
    <item>
      <title>Hugo GithubPages Chromebook</title>
      <link>https://mandolyte.github.io/explorations/posts/hugo-githubpages-chromebook/</link>
      <pubDate>Sat, 14 Apr 2018 21:40:24 -0400</pubDate>
      
      <guid>https://mandolyte.github.io/explorations/posts/hugo-githubpages-chromebook/</guid>
      <description>I confess that there is little to like about Google&amp;rsquo;s Blogger platform. It certainly has not kept pace with offerings like Wordpress or Medium. I suspect that it would suffice for normal text only blogging, but I have a technical blog and getting code snippets to work well is painful.</description>
    </item>
    
  </channel>
</rss>